#!/bin/bash

# File: builddoc.sh
#
# Description: This script generates documentation from markdown files.
# It is designed to run inside a Docker container as part of the Bifrost DocuWrite system.
# The script processes markdown files, generates a PDF document, creates a TODO list,
# and includes an appendix of all figures with their respective sections and page numbers.
#
# Usage: This script is intended to be run as the entrypoint of a Docker container.
#        It expects input files to be mounted at /app/input-repo and
#        will output the generated files to /app/output-repo.
#
# Environment Variables:
#   DOCUMENT_TITLE: The title of the generated document (optional)
#   DOCUMENT_SOURCE_URL: The source URL of the document (optional)
#   DOCUMENT_MESSAGE: A custom message to include in the document (optional)
#   TODO_MESSAGE: A custom message for the TODO list (optional)
#   SKIP_MERMAID: Set to "true" to skip Mermaid diagram generation (optional)
#
# Author: [Your Name]
# Date: [Current Date]
# Version: 3.0

set -e

# Ensure PATH includes npm global bin and TinyTeX
export PATH="/home/docuser/.npm-global/bin:/home/docuser/.TinyTeX/bin/aarch64-linux:$PATH"

# Function for logging
log() {
    echo "[$(date +'%Y-%m-%d %H:%M:%S')] $1"
}

# Define paths
INPUT_PATH="/app/input-repo"
OUTPUT_PATH="/app/output-repo"
TEMP_PATH="/app/markdown_conversion"
ORDER_FILE="$INPUT_PATH/.order"
MERGED_FILENAME="$TEMP_PATH/merged.md"
LATEX_TEMPLATE="$TEMP_PATH/header.tex"
OUTPUT_PDF_FILE="$OUTPUT_PATH/documentation.pdf"
TODO_LIST="$OUTPUT_PATH/todo-list.md"
FIGURES_LIST="$OUTPUT_PATH/figures-list.md"
TEMP_PDF="$TEMP_PATH/temp.pdf"

# Set default values and allow override through environment variables
DOCUMENT_TITLE=${DOCUMENT_TITLE:-"Integration Documentation"}
DOCUMENT_SOURCE_URL=${DOCUMENT_SOURCE_URL:-""}
DOCUMENT_MESSAGE=${DOCUMENT_MESSAGE:-"This PDF document is generated from the markdown files in the repository. Consider it outdated if not generated recently."}
TODO_MESSAGE=${TODO_MESSAGE:-"This document contains a list of TODO:s extracted from the markdown files. Do not edit this file directly."}
SKIP_MERMAID=${SKIP_MERMAID:-"false"}

DOCUMENT_GENERATE_TIME=$(date)

log "Starting documentation generation process"

# Cleanup and create directories
log "Cleaning up old files and creating directories"
rm -rf "$TEMP_PATH"
mkdir -p "$OUTPUT_PATH" "$TEMP_PATH"

# Check if input repository exists
if [[ ! -d "$INPUT_PATH" ]]; then
    log "Error: Input repository not found at $INPUT_PATH"
    exit 1
fi

log "Input repository found at $INPUT_PATH"

# Initialize merged Markdown file
log "Initializing merged Markdown file"
{
    echo "% $DOCUMENT_TITLE"
    if [ -n "$DOCUMENT_SOURCE_URL" ]; then
        echo "% Generated from $DOCUMENT_SOURCE_URL"
    fi
    echo "% Warning: $DOCUMENT_MESSAGE Generated at $DOCUMENT_GENERATE_TIME"
    echo "\\newpage"
} > "$MERGED_FILENAME"

# Process files in order
log "Processing Markdown files"
if [[ -f "$ORDER_FILE" ]]; then
    log "Found .order file, processing files in specified order"
    while IFS= read -r file || [[ -n "$file" ]]; do
        file=$(echo "$file" | tr -d ' "' | tr -d '\r')
        if [[ -f "$INPUT_PATH/$file" ]]; then
            log "Processing file: $file"
            sed 's/:::/```/g' "$INPUT_PATH/$file" > "$TEMP_PATH/$file"
            cat "$TEMP_PATH/$file" >> "$MERGED_FILENAME"
            echo -e '\n\\newpage\n' >> "$MERGED_FILENAME"
        else
            log "Warning: File '$file' listed in $ORDER_FILE does not exist"
        fi
    done < "$ORDER_FILE"
else
    log "Warning: .order file not found. Processing all .md files in alphabetical order."
    for file in "$INPUT_PATH"/*.md; do
        if [[ -f "$file" ]]; then
            log "Processing file: $(basename "$file")"
            sed 's/:::/```/g' "$file" > "$TEMP_PATH/$(basename "$file")"
            cat "$TEMP_PATH/$(basename "$file")" >> "$MERGED_FILENAME"
            echo -e '\n\\newpage\n' >> "$MERGED_FILENAME"
        fi
    done
fi

# Extract TODOs
log "Extracting TODOs"
{
    echo "# Generated list of TODO:s"
    echo -e "\nWarning: $TODO_MESSAGE Generated at $DOCUMENT_GENERATE_TIME\n"
    echo "| Section | TODO Item |"
    echo "|---------|-----------|"
    awk '
        /^#/ {
            heading = $0; 
            gsub(/^#+ */, "", heading);
        }
        /^TODO:/ {
            if (heading != "") {
                print "| " heading " | " $0 " |";
                heading = "";
            } else {
                print "| (No heading) | " $0 " |";
            }
        }
    ' "$MERGED_FILENAME"
} > "$TODO_LIST"

log "Appending TODO list to main document"
cat "$TODO_LIST" >> "$MERGED_FILENAME"

# Create LaTeX template
log "Creating LaTeX template"
cat << EOF > "$LATEX_TEMPLATE"
\\usepackage{fancyhdr}
\\usepackage{lastpage}
\\usepackage{graphicx}
\\usepackage{geometry}
\\pagestyle{fancy}
\\fancyhf{}
\\rfoot{Generated on \\today}
\\lhead{$DOCUMENT_TITLE}
\\rhead{Page \\thepage\\ of \\pageref{LastPage}}
\\setlength\\headheight{15pt}
EOF

# Generate temporary PDF for page number extraction
log "Generating temporary PDF for page number extraction"
if [ "$SKIP_MERMAID" = "true" ]; then
    pandoc --pdf-engine=xelatex --toc --toc-depth=3 --include-in-header="$LATEX_TEMPLATE" "$MERGED_FILENAME" -o "$TEMP_PDF"
else
    pandoc -F mermaid-filter --pdf-engine=xelatex --toc --toc-depth=3 --include-in-header="$LATEX_TEMPLATE" "$MERGED_FILENAME" -o "$TEMP_PDF"
fi

# Extract Figures with page numbers
log "Extracting Figures with page numbers"
{
    echo "# List of Figures"
    echo -e "\nThis is a list of all figures in the document.\n"
    echo "| Figure Number | Section | Description | Page |"
    echo "|---------------|---------|-------------|------|"
    awk '
        BEGIN { figure_number = 1 }
        /^#/ {
            section = $0;
            gsub(/^#+ */, "", section);
        }
        /^:::mermaid/ || /^```mermaid/ {
            in_mermaid = 1;
            description = "Mermaid diagram";
            print "| Figure " figure_number " | " section " | " description " | {{PAGE_" figure_number "}} |";
            figure_number++;
            next;
        }
        /^:::/ || /^```/ {
            in_mermaid = 0;
        }
    ' "$MERGED_FILENAME" | while IFS= read -r line; do
        if [[ $line =~ \{\{PAGE_([0-9]+)\}\} ]]; then
            figure_num="${BASH_REMATCH[1]}"
            page_num=$(pdfgrep -n "Figure $figure_num" "$TEMP_PDF" | cut -d: -f1 | head -n1)
            echo "${line//\{\{PAGE_$figure_num\}\}/$page_num}"
        else
            echo "$line"
        fi
    done
} > "$FIGURES_LIST"

log "Appending Figures list to main document"
echo -e "\n\\newpage\n" >> "$MERGED_FILENAME"
cat "$FIGURES_LIST" >> "$MERGED_FILENAME"

# Generate final PDF
log "Generating final PDF"
if [ "$SKIP_MERMAID" = "true" ]; then
    log "Skipping Mermaid diagram generation"
    pandoc --pdf-engine=xelatex --toc --toc-depth=3 --include-in-header="$LATEX_TEMPLATE" "$MERGED_FILENAME" -o "$OUTPUT_PDF_FILE"
else
    log "Including Mermaid diagram generation"
    log "Mermaid-filter location: $(which mermaid-filter)"
    pandoc -F mermaid-filter --pdf-engine=xelatex --toc --toc-depth=3 --include-in-header="$LATEX_TEMPLATE" "$MERGED_FILENAME" -o "$OUTPUT_PDF_FILE"
fi

# Check if PDF generation was successful
if [[ -f "$OUTPUT_PDF_FILE" ]]; then
    log "PDF file generated successfully at: $OUTPUT_PDF_FILE"
else
    log "Error: Failed to generate PDF file"
    log "Contents of $TEMP_PATH:"
    ls -la "$TEMP_PATH"
    log "Contents of $OUTPUT_PATH:"
    ls -la "$OUTPUT_PATH"
    exit 1
fi

# Cleanup temporary files
log "Cleaning up temporary files"
rm -rf "$TEMP_PATH"

log "Documentation generation process completed"